/*
 * Copyright 2006-2018. California Institute of Technology.
 * ALL RIGHTS RESERVED.
 * U.S. Government sponsorship acknowledged.
 *
 * This software is subject to U. S. export control laws and
 * regulations (22 C.F.R. 120-130 and 15 C.F.R. 730-774). To the
 * extent that the software is subject to U.S. export control laws
 * and regulations, the recipient has the responsibility to obtain
 * export licenses or other export authority as may be required
 * before exporting such information to foreign countries or
 * providing access to foreign nationals.
 */
package jpl.gds.tcapp.app.gui.fault;

import java.util.List;

import jpl.gds.tc.api.cltu.ICltu;
import jpl.gds.tc.api.ITcTransferFrame;
import jpl.gds.tc.api.command.IFlightCommand;

/**
 * This is a struct-like object that represents the state transferred
 * between individual parts of the fault injection flow.  It's an internal interface
 * used only by the pieces of the fault injector.
 *
 * For instance, command builder sets the "command" and passes this class to the frame editor.
 * 
 * The frame editor sets "frames" and passes this class to the cltu editor.
 * 
 * Etc.
 *
 *
 */
public class FaultInjectionState
{
    /*
     * These variables intentionally have package visibility
     */

    /** The command selected by the user in the command builder */
    protected IFlightCommand command = null;

    /** The list of frames generated by the frame editor */
    protected  List<ITcTransferFrame> frames = null;
    /** The particular frame the user had selected */
    protected  int selectedFrameIndex = 0;

    /** The list of CLTUs generated by the CLTU editor */
    protected  List<ICltu> cltus = null;
    /** The particular CLTU the user had selected */
    protected  int selectedCltuIndex = 0;

    /** The PLOP-level stream of bits that will be transmitted */
    protected String rawOutputHex = null;
}
