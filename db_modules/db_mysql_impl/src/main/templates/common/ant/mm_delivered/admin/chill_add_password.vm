#set ( $shellName = "sh" )
#shell( $shellName )

# Set this to true for debugging
DEBUG=false

#init()

if test "X$1" = "X-h" -o "X$1" = "X--help"
then
    echo "$0 [--username mpcs] [mysql arguments]" 1>&2
    exit 1
fi

# MPCS-7140 Find subnets file

if test -z "${CHILL_DB_SUBNETS}"
then
    # User didn't set it, try the standard configurations

    TRY1="${CHILL_GDS}/config/${CHILL_MISSION}/subnets.conf"

    if test -r ${TRY1} -a -f ${TRY1}
    then
        export CHILL_DB_SUBNETS="${TRY1}"
    else
        TRY2="${CHILL_GDS}/config/subnets.conf"

        if test -r ${TRY2} -a -f ${TRY2}
        then
            export CHILL_DB_SUBNETS="${TRY2}"
        else
            echo "Cannot find or read database subnets file as ${TRY1} or ${TRY2}" 1>&2
            exit 1
        fi
    fi

# User set bad subnet file -> Exit
elif test ! -r "${CHILL_DB_SUBNETS}" -o ! -f "${CHILL_DB_SUBNETS}"
then
    echo "Cannot find or read database subnets file: CHILL_DB_SUBNETS='${CHILL_DB_SUBNETS}'" 1>&2
    exit 1
fi


# MPCS-7746 Make sure subnet file has
# at least one valid entry before password prompt
#
# MPCS-7140 Redo loop to use subnets file
# which can have blank lines or comments.
# NB: the hash is a special character to both bash and Velocity,
# so be careful and double-check any changes to that logic.

while read i
do
    # Trim blanks fore and aft
    i=`echo ${i}`

    if test -z "${i}"
    then
        continue
    fi

    # Look for comments if any, and remove them

    i=`echo "${i}" | sed -e 's/#.*$//'`

    # Trim blanks aft again
    i=`echo ${i}`

    # May be empty now

    if test -z "${i}"
    then
        continue
    fi

    SUB="${i}"

done <${CHILL_DB_SUBNETS}

if test -z "${SUB}"
then
    printf "\nSubnet file contains NO valid entries. There must be at least one uncommented non-blank line" 1>&2
    exit 1
fi


printf "Using database subnets file ${CHILL_DB_SUBNETS}\n"


# Allow --username as the first argument only

USERNAME=mpcs
SHIFT=0

for OPTION
do
    if test ${SHIFT} -eq 1
    then
        # Get user name and do not continue

        USERNAME="${OPTION}"
        SHIFT=2
        break

    elif test "X${OPTION}" = "X--username"
    then
        # Option specified, expect user name and continue

        SHIFT=1

    else
        # Did not find option, do not continue looking
        break
    fi
done

if test ${SHIFT} -eq 1
then
    echo "--username option not followed by user name" 1>&2
    echo "$0 [--username mpcs] [mysql arguments]" 1>&2
    exit 1
fi

TUSERNAME=`echo "${USERNAME}" | tr -d ' '`

if test "X${USERNAME}" != "X${TUSERNAME}"
then
    echo "User name must not contain blanks" 1>&2
    exit 1
fi

if test `expr "X${USERNAME}" : "X-"` -gt 0
then
    echo "User name must not begin with a dash" 1>&2
    exit 1
fi

if test "X${USERNAME}" = "X"
then
    echo "User name cannot be empty" 1>&2
    exit 1
fi

# Ignore arguments we processed
shift ${SHIFT}

# Check for it occurring again or not at the beginning
for OPTION
do
    if test "X${OPTION}" = "X--username"
    then
        echo "--username must be first option" 1>&2
        echo "$0 [--username mpcs] [mysql arguments]" 1>&2
        exit 1
    fi
done

DBARGS=${1+"$@"}


# Prompt for password, but do not display as typed

printf "Password:"
stty -echo
read PWD
stty echo
echo

if test "X${PWD}" != "X"
then
    echo "Password will be set for user name ${USERNAME}"
else
    echo "Password will be removed for user name ${USERNAME}"
fi


CMD=""
TEXT=""

# MPCS-7746 now loop through and build the command
#
# MPCS-7140 Redo loop to use subnets file
# which can have blank lines or comments.
# NB: the hash is a special character to both bash and Velocity,
# so be careful and double-check any changes to that logic.

while read i
do
    # Trim blanks fore and aft
    i=`echo ${i}`

    if test -z "${i}"
    then
        continue
    fi

    # Look for comments if any, and remove them

    i=`echo "${i}" | sed -e 's/#.*$//'`

    # Trim blanks aft again
    i=`echo ${i}`

    # May be empty now

    if test -z "${i}"
    then
        continue
    fi

    # Make sure that the user exists first
    CMD="${CMD} GRANT USAGE ON *.* TO '${USERNAME}'@'${i}';"

    TEXT="${TEXT} GRANT USAGE ON *.* TO '${USERNAME}'@'${i}';\n"

    CMD="${CMD} SET PASSWORD for '${USERNAME}'@'${i}' = PASSWORD('${PWD}');"

    TEXT="${TEXT} SET PASSWORD for '${USERNAME}'@'${i}' = PASSWORD('========');\n"

done <${CHILL_DB_SUBNETS}

if test -z "${CMD}"
then
    printf "\nSubnet file contains NO valid entries" 1>&2
    echo "There must be at least one uncommented line"
    exit 1
fi

CMD="${CMD} FLUSH PRIVILEGES;"
TEXT="${TEXT} FLUSH PRIVILEGES;"



echo
echo "User name ${USERNAME}"
echo "Additional arguments '${DBARGS}'"
echo

#set ( $operation = "add/remove password" )
#SQLOperation( $operation )

# Make sure that shell wildcards are not expanded
set -o noglob

echo
echo "Executing:"
echo -e "${TEXT}"
echo

set +o noglob

# Do the real work

if test "X${DEBUG}" != "Xtrue"
then
    mysql ${CHILL_MYSQL_OPTIONS} ${DBARGS} -e "${CMD}"
else
    echo "Would have done: " mysql ${CHILL_MYSQL_OPTIONS} ${DBARGS} -e "${CMD}"
fi

exit $?
