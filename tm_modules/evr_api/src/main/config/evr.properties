#
# AMMOS Mission Data Processing and Control System (AMPCS)
# Initial Author: M. Verdugo
# Creation Date: 09/22/2016
#
# Copyright (c) 2006-2017. California Institute of Technology.
# ALL RIGHTS RESERVED.
# U.S. Government sponsorship acknowledged.
#
# This software is subject to U. S. export control laws and
# regulations (22 C.F.R. 120-130 and 15 C.F.R. 730-774). To the
# extent that the software is subject to U.S. export control laws
# and regulations, the recipient has the responsibility to obtain
# export licenses or other export authority as may be required
# before exporting such information to foreign countries or
# providing access to foreign nationals.
# 
# This is the AMPCS properties file containing properties for EVR projects
#
# This file is loaded using the standard AMPCS configuration file search
# mechanism, which typically looks first at the AMPCS system configuration 
# level, then at the project/mission configuration level, then at the user 
# configuration level. All properties files that are found will be loaded 
# in this order, with any configuration properties specified in later files 
# overriding those found in earlier files. It is not necessary to override
# all properties at the project or user level. If properties are omitted
# at any level, the property values loaded at the previous level remain in
# effect.
#
# Properties and their corresponding values must be included on a single line.
#
# Change Notes:
#

########################################################
evr.categoryDescription=EVR properties are used to configure behaviors related to extraction of EVRs from packets \
and various aspects of their display in monitoring and plotting tools.

evr.flight.levels.blockDescription=Properties that configure flight EVR levels, same as those defined in the flight EVR dictionary.

evr.flight.levels.all.description=Comma-separated list of supported EVR levels for flight software
evr.flight.levels.all.behavioralNotes=These must match the EVR levels defined in the EVR dictionary.
evr.flight.levels.all.formatHint=Values should consist only of alphanumeric characters, underscores, and dashes.
evr.flight.levels.all = FATAL,WARNING,COMMAND

evr.flight.levels.command.description=The "command" EVR level for flight software, indicating receipt or execution of a command
evr.flight.levels.command.validValues=[values for evr.flight.levels.all]
evr.flight.levels.command = COMMAND

evr.flight.levels.fatal.description = The "fatal" EVR level for flight software, indicating a fatal flight software event
evr.flight.levels.fatal.validValues=[values for evr.flight.levels.all]
evr.flight.levels.fatal = FATAL

evr.sse.levels.blockDescription=Properties that configure SSE/GSE EVR levels, same as those defined in the SSE EVR dictionary.

evr.sse.levels.all.description=Comma-separated list of supported EVR levels for SSE/GSE software
evr.sse.levels.all.behavioralNotes=These must match the EVR levels defined in the SSE EVR dictionary.
evr.sse.levels.all.formatHint=Values should consist only of alphanumeric characters, underscores, and dashes.
evr.sse.levels.all = FATAL,WARNING,COMMAND

evr.sse.levels.command.description=The "command" EVR level for SSE/GSE software, indicating receipt or execution of a command
evr.sse.levels.command.validValues=[values for evr.sse.levels.all]
evr.sse.levels.command = COMMAND

evr.sse.levels.fatal.description=The "fatal" EVR level for SSE/GSE software, indicating a fatal SSE/GSE software event
evr.sse.levels.fatal.validValues=[values for evr.sse.levels.all]
evr.sse.levels.fatal = FATAL

evr.saveSources.description=True/false flag indicating whether source file specified in an EVR packet should be saved as EVR metadata. \
Applies only to EVRs extracted from pure EVR packets, not to EVRs extracted using generic decom.
evr.saveSources.behavioralNotes = Applies only if EVR message text includes a source file name in such a way that it can be extracted uniformly from all EVRs; may also cause the source file name to be stripped from the EVR message itself, depending upon implementation
evr.saveSources.validValues=true | false
evr.saveSources = false

evr.backgroundColor.blockDescription=Background color designations for various EVR levels, for use on displays. Note that most of these \
properties, other than the default properties, require the EVR level as the last component in the property name.

evr.backgroundColor.default.description=Default background color for EVR records displayed in GUIs or color-coded reports, as R,G,B value
evr.backgroundColor.default.formatHint=Specified as a Red,Green,Blue tuple where each value ranges from 0 to 255
evr.backgroundColor.default = 0,0,255

evr.backgroundColor.[EVR_LEVEL].description=Background color for EVR records displayed in GUIs or color-coded reports, as R,G,B value, for the specified EVR level.
evr.backgroundColor.[EVR_LEVEL].formatHint=Specified as a Red,Green,Blue tuple where each value ranges from 0 to 255
evr.backgroundColor.COMMAND = 0,0,255
evr.backgroundColor.FATAL = 255,0,0
evr.backgroundColor.WARNING = 255,127,36

evr.foregroundColor.blockDescription=Foreground color designations for various EVR levels, for use on displays. Note that most of these \
properties, other than the default properties, require the EVR level as the last component in the property name.

evr.foregroundColor.default.description=Default foreground color for EVR records displayed in GUIs or color-coded reports, as R,G,B value
evr.foregroundColor.default.formatHint=Specified as a Red,Green,Blue tuple where each value ranges from 0 to 255
evr.foregroundColor.default = 255,255,255

evr.foregroundColor.[EVR_LEVEL].description=Foreground color for EVR records displayed in GUIs or color-coded reports, as R,G,B value, for the specified EVR level.
evr.foregroundColor.[EVR_LEVEL].formatHint=Specified as a Red,Green,Blue tuple where each value ranges from 0 to 255
evr.foregroundColor.COMMAND = 255,255,255
evr.foregroundColor.FATAL = 255,255,255
evr.foregroundColor.WARNING = 0,0,0

evr.plot.ordinal.[EVR_LEVEL].description=Ordinal used for the specified EVR level in chill_get_plots. This determines the Y offset \
for the EVR when it is overlayed on a channel plot. 
evr.plot.ordinal.[EVR_LEVEL].validValues=0 to 100
evr.plot.ordinal.EVR_UNKNOWN=0
evr.plot.ordinal.FATAL=10
evr.plot.ordinal.COMMAND=20
evr.plot.ordinal.WARNING=30

