/*
 * Copyright 2006-2018. California Institute of Technology.
 * ALL RIGHTS RESERVED.
 * U.S. Government sponsorship acknowledged.
 *
 * This software is subject to U. S. export control laws and
 * regulations (22 C.F.R. 120-130 and 15 C.F.R. 730-774). To the
 * extent that the software is subject to U.S. export control laws
 * and regulations, the recipient has the responsibility to obtain
 * export licenses or other export authority as may be required
 * before exporting such information to foreign countries or
 * providing access to foreign nationals.
 */
package jpl.gds.product.impl.message;

import java.util.Map;

import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;

import org.springframework.context.ApplicationContext;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;

import jpl.gds.product.api.IProductPartProvider;
import jpl.gds.product.api.IProductPartUpdater;
import jpl.gds.product.api.ProductException;
import jpl.gds.product.api.builder.IProductBuilderObjectFactory;
import jpl.gds.product.api.message.IPartReceivedMessage;
import jpl.gds.product.api.message.ProductMessageType;
import jpl.gds.shared.message.BaseXmlMessageParseHandler;
import jpl.gds.shared.message.IMessage;
import jpl.gds.shared.message.Message;
import jpl.gds.shared.message.MessageRegistry;
import jpl.gds.shared.template.FullyTemplatable;
import jpl.gds.shared.time.IAccurateDateTime;

/**
 * ProductPartMessage is the internal message indicating that a product
 * part has been generated by the product builder.  It is both an internal
 * and an external message.
 * 
 */
public class ProductPartMessage extends Message implements IPartReceivedMessage, FullyTemplatable {

    private IProductPartProvider part;

    /**
     * Creates an instance of ProductPartMessage with a current event time.
     * @param part the product part provider
     *
     */
    public ProductPartMessage(final IProductPartProvider part) {
        super(ProductMessageType.ProductPart, System.currentTimeMillis());
        this.part = part;
    }

    /**
     * Creates an instance of ProductPartMessage with the given event time.
     * @param time the time the event occurred
     *
     */
    protected ProductPartMessage(final IAccurateDateTime time) {
        super(ProductMessageType.ProductPart, time.getTime());
    }

    /**
     * Sets the product part provider. For use in message parsing only.
     * 
     * @param _part product part provider
     */
	protected void setPart(final IProductPartProvider _part) {
        this.part = _part;
    }

    /**
     * {@inheritDoc}
     */
    @Override
	public IProductPartProvider getPart() {
        return this.part;
    }

    /**
     * {@inheritDoc}
     * @see jpl.gds.shared.message.IMessage#toString()
     */
    @Override
    public String toString() {
        return "PartMessage[Part=" + getPart() + "]";
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void setTemplateContext(final Map<String,Object> map) {
        super.setTemplateContext(map);
        if (getEventTimeString() != null) {
        	map.put(IMessage.EVENT_TIME_TAG, getEventTimeString());
        } else {
            map.put(IMessage.EVENT_TIME_TAG, null);
        }
        if (this.part != null) {
            map.put("part", "true");
            map.put("class", this.part.getClass().getName());
            this.part.setTemplateContext(map);
        }
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
	public void generateStaxXml(final XMLStreamWriter writer) throws XMLStreamException
    {
    	writer.writeStartElement(MessageRegistry.getDefaultInternalXmlRoot(getType())); // <ProductPartMessage>
    	writer.writeAttribute(IMessage.EVENT_TIME_TAG,getEventTime() != null ? getEventTimeString() : "");
    	
    	super.generateStaxXml(writer);
    	
    	if(this.part != null)
    	{
    		this.part.generateStaxXml(writer);
    	}
    	
    	writer.writeEndElement(); // </ProductPartMessage>
    }

    /**
     * ParseHandler is the message-specific SAX parse handler for creating this message
     * from its XML representation.
     * 
     */
    public static class XmlParseHandler extends BaseXmlMessageParseHandler {
        private ProductPartMessage msg;
        private IProductPartUpdater part;
		private final IProductBuilderObjectFactory partFactory;

		/**
		 * Constructor.
		 * 
		 * @param appContext the current application context
		 */
		public XmlParseHandler(final ApplicationContext appContext) {
			super();
			this.partFactory = appContext.getBean(IProductBuilderObjectFactory.class);
		}

        /**
         * {@inheritDoc}
         */
        @Override
        public void startElement(final String uri,
                                 final String localName,
                                 final String qname,
                                 final Attributes attr)
        throws SAXException {
            super.startElement(uri, localName, qname, attr);

            if (qname.equalsIgnoreCase(MessageRegistry.getDefaultInternalXmlRoot(ProductMessageType.ProductPart))) {
            	setInMessage(true);
                final IAccurateDateTime d = getDateFromAttr(attr, IMessage.EVENT_TIME_TAG);
                this.msg = new ProductPartMessage(d);
                this.part = null;
                addMessage(this.msg);
             } else if (qname.equalsIgnoreCase("ProductPart")) {
                 try {
                    this.part = partFactory.createPartUpdater();
				} catch (final ProductException e) {
					e.printStackTrace();
					throw new SAXException(e.toString());
				}
             }
        }

        /**
         * {@inheritDoc}
         */
        @Override
        public void endElement(final String uri,
                               final String localName,
                               final String qname)
        throws SAXException {
            super.endElement(uri, localName, qname);

            if (qname.equalsIgnoreCase(MessageRegistry.getDefaultInternalXmlRoot(ProductMessageType.ProductPart))) {
            	setInMessage(false);
            } else if (qname.equalsIgnoreCase("ProductPart")) {
                this.msg.setPart(this.part);
            } else if (this.part != null) {
                this.part.parseFromElement(qname, getBufferText());
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String getOneLineSummary() {
        if (this.part == null) {
            return "No Part";
        }
        final StringBuffer result = new StringBuffer("Received part ");
        result.append(this.part.getPartNumber() + " of " + this.part.getMetadata().getTotalParts());
        result.append(" for transaction " + (this.part.getTransactionId() == null ?
                "Unknown" : this.part.getTransactionId()));
        return result.toString();
    }

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String getXmlRootName() {
		return MessageRegistry.getDefaultInternalXmlRoot(getType());
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public int getMtakFieldCount() {
		return MTAK_FIELD_COUNT;
	}
	
}
