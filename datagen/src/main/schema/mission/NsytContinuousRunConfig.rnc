# AMPCS NSYT Continuous Science Packet Generator Run 
# Configuration Schema
#
# This schema defines the XML used to configure each run of the 
# AMPCS NSYT Continuous Science Packet Generator.
#
# Version 1.0 - M. DeMore. (MPCS-6854 - 11/21/14)

include "../CommonConfig.rnc"

# Root element. Start XML document here.
start =
  element NsytContinuousGeneratorRunConfig {
  
    # See the common schema for definition. 
    # Note that one must choose between a desired file size
    # or a specific number of packets.
    ( desired-size-def | desired-packets-def ), 
    
    # See the common schema for definition of these elements
    desired-report-def?,
    sclk-seed-def,
    
    element InstrumentSeedData {
    
         # Packet APID for packets to generate in this run.
         # See the common schema for definition.
         element Apid { apid-def },
         
         # Continous Science Configuration File ID to write into packets 
         # for this run. Defaults to 0.
         element ConfigurationFileId { uint-16-def }?,
         
         # Starting instrument timestamp. For the SEIS intrument, use the LOBT 
         # element. For APSS, use the AOBT element.
         ( lobt-time-def | aobt-time-def ),
         
         # Instrument channel IDs to generate packets for. The generator will 
         # rotate through this list.
         element InstrumentChannels {
               element ChannelId { uint-16-def }+
         },
         
         # Seed data for the sample data. The sample data block is 
         # either compressed or uncompressed, and that determines
         # which element to choose here.
         ( compressed-seed-def | uncompressed-seed-def )      
    }
}

# Seed element for compressed sample data.
#
# Compressed data cannot be generated. The binary data must be read,
# precompressed, from a file, and inserted into the generated packets.
# Each compressed blob has an associated properties file defining
# things about the blob, such as the moment values that were used
# ot compress it.
compressed-seed-def = element CompressedSampleSeedData {

     # Can specify either a single compressed blob properties file, or a 
     # directory of them.
     ( 
         # Directory path to compressed blob property files. If there is 
         # more than one properties file, the generator will rotate 
         # through them.
         element BlobDirectory { xsd:string } 
     
     |   # OR
     
         # File path to compressed blob property file. In this case, the same 
         # blob will be written to all packets.
         element BlobPropertyFile { xsd:string } 
     )
}

# Seed element for uncompressed sample data.
#
# Uncompressed data is generated by the generator application.
uncompressed-seed-def = element UncompressedSampleSeedData {

     # Minimum number of samples per packet. Defaults to 1.
     element MinSamples { non-zero-uint-16-def }?,
     
     # Maximum number of samples per packet. Defaults to 1024.
     element MaxSamples { non-zero-uint-16-def }?,
     
     # Unsigned seed information, identifying the source of
     # unsigned data values. Only the 32-bit unsigned seed
     # file is used, and it must be pointed at a seed file
     # that contains 24 bit integers, not 32-bit integers,
     # because the instrument generates unsigned 24-bit values.
     # If omitted, the default unsigned 24 bit table will be 
     # used.
     unsigned-seed-def?
}

# Seed information for generating LOBT-format instrument times.
# Used for the SEIS instrument packets.  LOBT is a single 40-bit
# value.
lobt-time-def = element LobtSeedData {

    # Starting LOBT value. This value will be used for the 
    # first packet.
    element InitialLobt { uint-40-def },
    
    # LOBT increment, to be added to LOBT for each subsequent 
    # packet. A negative value will result 
    # in packets being generated in reverse time order, but no
    # protections are in place to prevent negative roll.
    element LobtDelta { int-40-def-range }
}

# Seed information for generating AOBT-format instrument times.
# Used for the APSS instrument packets.  AOBT consists of a
# 32-bit coarse value, and a 16-bit fine value, but the fine value
# actually only ranges from 0 to 999.
aobt-time-def = element AobtSeedData {

    # Starting AOBT coarse and fine values. These values will 
    # be used for the first packet.
    element InitialAobt {
        attribute coarse { uint-32-def },
        attribute fine { thousandth-def  }
    },
  
    # AOBT coarse and fine increments, to be added to AOBT for 
    # each subsequent packet. Negative values will result in packets 
    # being generated in reverse time order, but no
    # protections are in place to prevent negative roll.
    element AobtDelta {
        attribute coarse { uint-32-def },
        attribute fine { thousandth-offset-def }
    }
}

# Unsigned decimal 40-bit number definition
uint-40-def = xsd:nonNegativeInteger { maxInclusive = "1099511627776"  }

# Signed decimal 40-bit number range
int-40-def-range = xsd:integer { minInclusive = "-1099511627776" maxInclusive = "1099511627776" }

# Unsigned decimal from 0 to 999
thousandth-def = xsd:nonNegativeInteger { maxInclusive = "999" }

# Signed decimal from -999 to 999
thousandth-offset-def = xsd:integer { minInclusive = "-999" maxInclusive = "999" }

# Non-zero unsigned decimal 16-bit number definition
non-zero-uint-16-def =  xsd:nonNegativeInteger { minInclusive = "1" maxInclusive = "65535" }

