/*
 * Copyright 2006-2018. California Institute of Technology.
 * ALL RIGHTS RESERVED.
 * U.S. Government sponsorship acknowledged.
 *
 * This software is subject to U. S. export control laws and
 * regulations (22 C.F.R. 120-130 and 15 C.F.R. 730-774). To the
 * extent that the software is subject to U.S. export control laws
 * and regulations, the recipient has the responsibility to obtain
 * export licenses or other export authority as may be required
 * before exporting such information to foreign countries or
 * providing access to foreign nationals.
 */
package ammos.datagen.verification.app;

import java.io.File;
import java.io.PrintWriter;

import org.apache.commons.cli.ParseException;

import ammos.datagen.config.DatagenProperties;
import ammos.datagen.evr.app.EvrGeneratorApp;
import jpl.gds.shared.annotation.CoverageIgnore;
import jpl.gds.shared.cli.app.ApplicationConfiguration;
import jpl.gds.shared.cli.cmdline.ICommandLine;
import jpl.gds.shared.cli.cmdline.OptionSet;
import jpl.gds.shared.config.GdsSystemProperties;
import jpl.gds.shared.log.TraceManager;

/**
 * This is an application that will compare an EVR truth file to the output of
 * the AMPCS chill_get_evrs query utility. It takes an input directory, which
 * corresponds to the output directory from an EVR packet generator run, and a
 * set of query options to pass to chill_get_evrs as command line options.
 * 
 *
 * MPCS-7750 - 10/23/15. Changed to use new BaseCommandOptions
 *          and new command line option strategy throughout.
 * 
 */
public class EvrVerificationApp extends AbstractVerificationApp {

    private String getEvrsPath;
    private DatagenProperties datagenProps;

    /**
     * Initializes the application by verifying that the needed AMPCS
     * applications can be found and creating the temporary query file.
     * 
     * 
     * @return true if initialization successful, false if not.
     */
    @Override
    public boolean init() {

        if (!super.init()) {
            return false;
        }
        datagenProps = new DatagenProperties();

        /*
         * Make sure we can find AMPCS EVR query utility.
         */
        this.getEvrsPath = GdsSystemProperties.getGdsDirectory()
                + File.separator
                + datagenProps.getEvrQueryScript();
        if (!new File(this.getEvrsPath).exists()) {
            log.error("Cannot locate chill_get_evrs in " + this.getEvrsPath);
            return false;
        }

        return true;
    }

    /**
     * Executes the main logic for this application: Runs chill_get_evrs and
     * verifies results against the datagen truth file.
     * 
     * @return application exit code: SUCCESS or FAILURE
     */
    public int run() {

        /*
         * Run the chill_get_evrs query and save results to temp file.
         */
        if (!runChillQuery()) {
            return FAILURE;
        }
        if (!compareEvrTruthToQueryOutput()) {
            return FAILURE;
        }

        return SUCCESS;
    }

    /**
     * Executes chill_get_evrs using the datagen verification template for
     * output and writes results to a temporary file.
     * 
     * @return true if the query was successful, false if not
     */
    private boolean runChillQuery() {

        return super.runChillQuery(this.getEvrsPath, datagenProps.getEvrQueryOptions());
    }

    /**
     * Compares EVR query output to the data generator EVR truth file.
     * 
     * @return true if comparison succeeded, false if there was an error or
     *         differences were found.
     */
    private boolean compareEvrTruthToQueryOutput() {

        /*
         * The truth file should be in the input directory supplied on the
         * command line.
         */
        final String evrTruthFile = this.inputDir + File.separator
                + EvrGeneratorApp.TRUTH_FILE_NAME;

        return compareTruthToQueryOutput(evrTruthFile, "EVR:");
    }

    /**
     * {@inheritDoc}
     * 
     * @see jpl.gds.shared.cli.app.AbstractCommandLineApp#showHelp()
     */
    @Override
    public void showHelp() {
        if (helpDisplayed.getAndSet(true)) {
            return;
        }

        final PrintWriter pw = new PrintWriter(System.out);
        pw.println("Usage: " + ApplicationConfiguration.getApplicationName()
                + " --inputDir <directory> --queryOptions <chill options>");
        pw.println("                   ");

        final OptionSet options = createOptions().getOptions();

        options.printOptions(pw);
        pw.println("This is a test verification application that will compare the truth");
        pw.println("files generated by the EVR data generator with the AMPCS EVR");
        pw.println("query output for an AMPCS session.\n");

        pw.flush();
    }

    /**
     * Main application entry point.
     * 
     * @param args
     *            Command line arguments from the user
     */
    @CoverageIgnore
    public static void main(final String[] args) {

        final EvrVerificationApp app = new EvrVerificationApp();

        // Parse the command line arguments
        try {
            final ICommandLine commandLine = app.createOptions()
                    .parseCommandLine(args, true);
            app.configure(commandLine);
        } catch (final ParseException e) {
            TraceManager.getDefaultTracer().error(e.getMessage());
            System.exit(1);
        }

        // Initialize the application
        final boolean ok = app.init();
        if (!ok) {
            System.exit(1);
        }
        try {
            final int code = app.run();
            System.exit(code);
        } catch (final Exception e) {
            // something totally unexpected happened
            e.printStackTrace();
            System.exit(1);
        }
    }
}
