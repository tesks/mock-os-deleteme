#! /usr/bin/env python
# -*- coding: utf-8 -*-

"""
This module contains common exceptions that will be used by MPCS Python code.
"""

from __future__ import (absolute_import, division, print_function)




class MpcsUtilError(Exception):
    '''MpcsUtilError is the base exception for all of the exceptions that
    are raised by Python code in MPCS Tools'''

    def __init__(self, args=None):
        '''constructor

            args = the string description of the exception (string)'''
        Exception.__init__(self,args)

class InvalidInitError(MpcsUtilError):
    '''InvalidInitError is the exception that is generated when an object is
    initialized improperly'''

    pass

class InvalidStateError(MpcsUtilError):
    '''InvalidStateError is the exception that is generated when an operation is invoked,
    but all the necessary preconditions for that operation have not been met'''

    pass

class XmlParsingError(MpcsUtilError):
    '''XmlParsingError is the exception generated when the GDS configuration
    object has a problem reading the XML generated by the chill_property_dump
    script that feeds in all of the configuration information'''

    pass

class ConfigError(MpcsUtilError):
    '''Configuration error is the superclass for all exceptions
    that can be raised by the GDS configuration object'''

    def __init__(self, args=None):
        ''' Constructor

            args = The string describing this exception (string)'''
        Exception.__init__(self,args)

class EnvironmentError(ConfigError):
    '''EnvironmentError is the exception generated when the CHILL_GDS
    environment variable that points to the MPCS installation is undefined.'''
    
    pass

class InvalidSessionKeyError(ConfigError):
    '''InvalidSessionKeyError is the exception generated when the specified
    session key is invalid'''

    pass

def test():
    pass

def main():
    return test()

if __name__ == "__main__":
    main()

################################################################################
# vim:set sr et ts=4 sw=4 ft=python fenc=utf-8: // See Vim, :help 'modeline'
