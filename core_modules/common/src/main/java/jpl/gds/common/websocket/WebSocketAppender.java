/*
 * Copyright 2006-2019. California Institute of Technology.
 * ALL RIGHTS RESERVED.
 * U.S. Government sponsorship acknowledged.
 *
 * This software is subject to U. S. export control laws and
 * regulations (22 C.F.R. 120-130 and 15 C.F.R. 730-774). To the
 * extent that the software is subject to U.S. export control laws
 * and regulations, the recipient has the responsibility to obtain
 * export licenses or other export authority as may be required
 * before exporting such information to foreign countries or
 * providing access to foreign nationals.
 */

package jpl.gds.common.websocket;

import jpl.gds.shared.log.AmpcsLog4jMessage;
import org.apache.logging.log4j.core.Filter;
import org.apache.logging.log4j.core.Layout;
import org.apache.logging.log4j.core.LogEvent;
import org.apache.logging.log4j.core.appender.AbstractAppender;
import org.apache.logging.log4j.core.config.plugins.Plugin;
import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
import org.apache.logging.log4j.core.config.plugins.PluginElement;
import org.apache.logging.log4j.core.config.plugins.PluginFactory;
import org.apache.logging.log4j.core.layout.PatternLayout;
import org.apache.logging.log4j.message.Message;
import org.springframework.context.ApplicationContext;

import java.io.Serializable;

/**
 * Custom Log4j2 appender used to forward log messages to the
 * IWebSocketConnectionManager implementation in the current application context.
 * 
 * Messages can not be properly distributed to web socket clients if the Tracer
 * being used to log with does not contain the application context
 * 
 *
 */
@Plugin(name = "WebSocketAppender", category = "Core", elementType = "appender", printObject = true)
public class WebSocketAppender extends AbstractAppender {

    /**
     * Constructor
     *
     * @param name
     *            The name to use
     * @param filter
     *            The filter to use
     * @param layout
     *            The layout to use
     * @param ignoreExceptions
     *            Whether or not to ignore exceptions
     */
    protected WebSocketAppender(final String name, final Filter filter, final Layout<? extends Serializable> layout,
                                final boolean ignoreExceptions) {
        super(name, filter, layout, ignoreExceptions);
    }

    /**
     * Factory method which creates an instance of the appender
     *
     * @param name
     *            The appender name from configuration
     * @param layout
     *            The appender layout from configuration
     * @param filter
     *            The appender filter from configuration
     * @return The AMPCS WebSocketAppender
     */
    @PluginFactory
    public static WebSocketAppender createAppender(
            @PluginAttribute("name") final String name,
            @PluginElement("Layout") Layout<? extends Serializable> layout,
            @PluginElement("Filter") final Filter filter) {

        if (layout == null) {
            layout = PatternLayout.createDefaultLayout();
        }
        return new WebSocketAppender(name, filter, layout, true);
    }

    @Override
    public void append(final LogEvent event) {
        final Message m = event.getMessage();

        try {
            final AmpcsLog4jMessage msg = (AmpcsLog4jMessage) m.getParameters()[0];
            if (msg.getApplicationContext() != null) {
                final IWebSocketConnectionManager webSocketConnectionManager;

                final ApplicationContext parent = msg.getApplicationContext().getParent();

                // If the message parent ApplicationContext is NOT null,
                // then this message was generated by a TI/TP worker process
                // ApplicationContext otherwise it was generated by the Service
                // ApplicationContext which does not have a parent.
                // TI/TP worker process ApplicationContext must have the parent context
                // so that the correct IWebSocketConnectionManager instance can be
                // notified to broadcast this log event.
                if (parent != null) {
                    webSocketConnectionManager = parent.getBean(IWebSocketConnectionManager.class);
                } else {
                    webSocketConnectionManager = msg.getApplicationContext().getBean(IWebSocketConnectionManager.class);
                }

                webSocketConnectionManager.handleLogMessage(msg);
            }
        } catch (final Exception e) {

        } // silently fail
    }

}
