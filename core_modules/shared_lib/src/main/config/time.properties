#
# AMMOS Mission Data Processing and Control System (AMPCS)
# Initial Author: M. D. Verdugo
# Creation Date: 08/11/2017
#
# Copyright (c) 2006-2017. California Institute of Technology.
# ALL RIGHTS RESERVED.
# U.S. Government sponsorship acknowledged.
#
# This software is subject to U. S. export control laws and
# regulations (22 C.F.R. 120-130 and 15 C.F.R. 730-774). To the
# extent that the software is subject to U.S. export control laws
# and regulations, the recipient has the responsibility to obtain
# export licenses or other export authority as may be required
# before exporting such information to foreign countries or
# providing access to foreign nationals.
# 
# This is the AMPCS properties file that defines time-related configuration.
#
# This file is loaded using the standard AMPCS configuration file search
# mechanism, which typically looks first at the AMPCS system configuration 
# level, then at the project/mission configuration level, then at the user 
# configuration level. All properties files that are found will be loaded 
# in this order, with any configuration properties specified in later files 
# overriding those found in earlier files. It is not necessary to override
# all properties at the project or user level. If properties are omitted
# at any level, the property values loaded at the previous level remain in
# effect.
#
# Properties and their corresponding values must be included on a single line.
#
# Change Notes:
#
########################################################
time.categoryDescription=Time properties are used to configure how AMPCS extracts and formats timestamps of various types, \
including SCLK, SCET, ERT, and LST times.

time.date.blockDescription=Configuration properties that control the formatting of UTC and Local Solar Times, and the use of times \
in directory names.

time.date.ertPrecision.description=Indicates number of decimal places displayed in earth receive time (ERT).
time.date.ertPrecision.validValues=0 to 7
time.date.ertPrecision=7

time.date.localSolarTime.blockDescription=Configuration properties that control the generation and display of Local Solar (SOL) Times.

time.date.localSolarTime.earthSecondConversionFactor.description=Represents the number of earth seconds in local solar second.
time.date.localSolarTime.earthSecondConversionFactor.formatHint=A double-precision floating point number greater than 0.
time.date.localSolarTime.earthSecondConversionFactor=0.97324429770083

time.date.localSolarTime.enable.description=Enables or disables computation of Local Solar Time (LST) in configured venues.
time.date.localSolarTime.enable.behavioralNotes=Venues which display LST must be configured in the mission properties. The LST \
AMPCS calculates is mean solar time, as opposed true solar time.
time.date.localSolarTime.enable.validValues=true | false
time.date.localSolarTime.enable=false

time.date.localSolarTime.epochScet.description=The epoch for the LST, given as a SCET value. This is the SCET value \
after which the local solar time becomes meaningful for a mission. For example, it might be the SCET when a lander \
reaches the surface of a planet.
time.date.localSolarTime.epochScet.formatHint=YYYY-MM-DDTHH:MM:SSS.fff[ffff] or YYYY-DOYTHH:MM:SSS.fff[ffff]
time.date.localSolarTime.epochScet=2038-01-19T00:00:00.000

time.date.localSolarTime.lstPrecision.description=Specify the number of decimal places to include in LST times.
time.date.localSolarTime.lstPrecision.validValues=0 to 3
time.date.localSolarTime.lstPrecision=3

time.date.localSolarTime.lstPrefix.description=The prefix to use on LST time output. Will be followed by a dash in the \
output, then the LST day number.
time.date.localSolarTime.lstPrefix.formatHint=Alphabetic letters only
time.date.localSolarTime.lstPrefix=SOL

time.date.scetPrecision.description=Indicates number of decimal places displayed in spacecraft event time (SCET).
time.date.scetPrecision.validValues=0 to 9
time.date.scetPrecision=9

time.date.useExtendedScetPrecision.description=Indicates whether to display and store extended SCET times, which have a precision greater than 3.
time.date.useExtendedScetPrecision.behavioralNotes=This must be set to true, and time.date.scetPrecision to a value greater than 3, for extended \
SCETs to actually be generated.
time.date.useExtendedScetPrecision.validValues=true | false
time.date.useExtendedScetPrecision=false

time.date.useDoyOutputDirectory.description=Indicates whether to use day-of-year (DOY) format in dates when constructing \
AMPCS output directory names that contain date/time. The alternative is year-month-day format.
time.date.useDoyOutputDirectory.validValues=true | false
time.date.useDoyOutputDirectory=false

time.date.useDoyOutputFormat.description=Indicates whether to use day-of-year (DOY) output format for GMT date/times. \
Applies to SCETs, ERTs, and all ground-generated event and record timestamps.
time.date.useDoyOutputFormat.validValues=true | false
time.date.useDoyOutputFormat=false

time.timeTags.blockDescription=Properties for defining standard and custom time codes. Note that [TIME_TYPE_ID] is used as an element \
in many of the property names. It is unique identifier used to reference this time definition in other AMPCS dictionaries and \
configuration files. This ID is fixed for canonical SCLK and DVT times, but additional custom coarse-fine time types can be added.

time.timeTags.coarseFineTime.blockDescription=Properties for definition of coarse-fine time fields and their display. This includes \
standard SCLK and DVT times, but also allows for custom coarse-fine times.

time.timeTags.coarseFineTime.idList.description=Comma-separated list of coarse-fine time type IDs. Coarse-fine time properties must be supplied \
for each ID on this list.
time.timeTags.coarseFineTime.idList.formatHint=Each value must start with either a letter or underscore and may contain only \
letters, digits, underscores, hyphens, and periods. 
time.timeTags.coarseFineTime.idList.formatHint.behavioralNotes=The values 'canonical_sclk' and 'dvt' are built in. The 'canonical_sclk' \
entry must be on this list at minimum, because it represents the canonical (standard) SCLK configuration.
time.timeTags.coarseFineTime.idList=canonical_sclk,dvt

time.timeTags.coarseFineTime.coarseBits.[TIME_TYPE_ID].description=Bit length for the coarse time segment in a coarse-fine time \
with the specified coarse-fine type ID.
time.timeTags.coarseFineTime.coarseBits.[TIME_TYPE_ID].validValues=1 to 32

time.timeTags.coarseFineTime.fineBits.[TIME_TYPE_ID].description=Bit length for the fine time segment in the coarse-fine time \
with the specified coarse-fine type ID.
time.timeTags.coarseFineTime.fineBits.[TIME_TYPE_ID].validValues=0 to 32

time.timeTags.coarseFineTime.fineModulus.[TIME_TYPE_ID].description=Defines a custom number of fine ticks per coarse tick \
in the coarse-fine time with the specified type ID. E.g., if it is set to 50,000, AMPCS will increment the coarse ticks by 1 \
and reset the number of fine ticks to 0 when the number of fine ticks reaches 50,000, and a fractional representation of \
the fine clock will be calculated as the number of fine ticks divided by the fine_modulus.
time.timeTags.coarseFineTime.fineModulus.[TIME_TYPE_ID].validValues=2 to Integer.MAX_VALUE
time.timeTags.coarseFineTime.fineModulus.[TIME_TYPE_ID].behavioralNotes=If this field is left blank, AMPCS will assume a modulus of \
2 raised to the power of the number of fine bits

time.timeTags.displayFormat.blockDescription=Properties that specifically dictate the display/output formatting of coarse-fine times.

time.timeTags.displayFormat.useFractionalFormat.[TIME_TYPE_ID].description=AMPCS can display the fine portion of a \
coarse-fine SCLK time either as the integer number of fine "ticks", or as a decimal fraction of a coarse tick \
(e.g., the number of fine ticks divided by the number of fine ticks in one coarse tick.
time.timeTags.displayFormat.useFractionalFormat.[TIME_TYPE_ID].behavioralNotes=Applies only to the 'canonical_sclk' and \
'dvt' built-in time type IDs.
time.timeTags.displayFormat.useFractionalFormat.[TIME_TYPE_ID].validValues=true | false

time.timeTags.displayFormat.fractionalSeparator.[TIME_TYPE_ID].description=If the fine portion of the coarse-fine time \
with the specified time type ID is configured to display as a fraction of one coarse tick, the character configured \
here will separate the coarse ticks and the fraction.
time.timeTags.displayFormat.fractionalSeparator.[TIME_TYPE_ID].validValues=- | .
time.timeTags.displayFormat.fractionalSeparator.[TIME_TYPE_ID].behavioralNotes=Cannot be the same as the ticksSeparator value for \
the same time type ID. Applies only to the 'canonical_sclk' and 'dvt' built-in time type IDs.

time.timeTags.displayFormat.ticksSeparator.[TIME_TYPE_ID].description=If the fine portion of the coarse-fine time with \
the specified time type ID is configured to display as an integer number of fine ticks, the character configured \
here will separate the coarse and the fine ticks.
time.timeTags.displayFormat.ticksSeparator.[TIME_TYPE_ID].validValues=- | .
time.timeTags.displayFormat.ticksSeparator.[TIME_TYPE_ID].behavioralNotes=Cannot be the same as the fractionalSeparator value \
for the same time type ID. Applies only to the 'canonical_sclk' and 'dvt' built-in time type IDs.

time.timeTags.coarseFineTime.coarseBits.canonical_sclk=32
time.timeTags.coarseFineTime.fineBits.canonical_sclk=16
time.timeTags.displayFormat.fractionalSeparator.canonical_sclk=.
time.timeTags.displayFormat.ticksSeparator.canonical_sclk=-
time.timeTags.displayFormat.useFractionalFormat.canonical_sclk=false

time.timeTags.coarseFineTime.coarseBits.dvt=32
time.timeTags.coarseFineTime.fineBits.dvt=32
time.timeTags.displayFormat.fractionalSeparator.dvt=.
time.timeTags.displayFormat.ticksSeparator.dvt=-
time.timeTags.displayFormat.useFractionalFormat.dvt=false

time.timeTags.customTime.blockDescription=Properties that allow for the definition of custom time fields.

time.timeTags.customTime.idList.description=Comma-separated list of custom time type IDs. Custom time properties must be supplied \
for each ID on this list.
time.timeTags.customTime.idList.formatHint=Each value must start with either a letter or underscore and may contain only \
letters, digits, underscores, hyphens, and periods.  
time.timeTags.customTime.idList=

time.timeTags.customTime.description=A custom time defines a block of bits in telemetry that AMPCS will not interpret as \
a time itself. Instead, it will provide the data to a user-defined algorithm that produces a canonical SCLK from those bits. 

time.timeTags.customTime.extractor.[TIME_TYPE_ID].description=This is a reference to the identifier of a sclk_extractor algorithm \
definition in the algorithms.xml file. This algorithm will be used to extract the time from data.

time.timeTags.fineTime.blockDescription=Properties that allow for the definition of custom fine time fields.

time.timeTags.fineTime.idList.description=Comma-separated list of fine time type IDs. Fine time properties must be supplied \
for each ID on this list.
time.timeTags.fineTime.idList.formatHint=Each value must start with either a letter or underscore and may contain only \
letters, digits, underscores, hyphens, and periods.
time.timeTags.fineTime.idList=

time.timeTags.fineTime.[TIME_TYPE_ID].description=A custom fine time defines single field that is of granularity less than one coarse tick \
that needs a custom interpretation. For example, a mission that uses coarse ticks on the order of one second might define a \
fine time field that represents a number of milliseconds.
time.timeTags.fineTime.bits.[TIME_TYPE_ID].description=Number of bits in the fine time for the specified custom fine time type ID.
time.timeTags.fineTime.bits.[TIME_TYPE_ID].validValues=0 to Integer.MAX_VALUE

time.timeTags.fineTime.fineModulus.[TIME_TYPE_ID].description=Defines a custom number of fine ticks per coarse tick \
in the fine time with the specified type ID. E.g., if it is set to 50,000, AMPCS will increment the coarse ticks by 1 \
and reset the number of fine ticks to 0 when the number of fine ticks reaches 50,000, and a fractional representation of \
the fine clock will be calculated as the number of fine ticks divided by the fineModulus. There is no default.
time.timeTags.fineTime.fineModulus.[TIME_TYPE_ID].validValues=2 to Integer.MAX_VALUE

time.timeTags.floatingPointTime.blockDescription=Properties that allow for the definition of custom floating point time fields.

time.timeTags.floatingPointTime.idList.description=Comma-separated list of floating point time type IDs. Floating point time \
properties must be supplied for each ID on this list.
time.timeTags.floatingPointTime.idList.formatHint=Each value must start with either a letter or underscore and may contain only \
letters, digits, underscores, hyphens, and periods.
time.timeTags.floatingPointTime.idList=

time.timeTags.floatingPointTime.description=This is for defining custom time fields in which a coarse-fine time is \
represented as a floating point number.  This will be converted to a coarse / fine time by AMPCS with no other conversion. \
In other words, the whole number portion of the floating point number is interpreted as the number of coarse ticks, \
and the fractional part of the floating point number is converted to an approximate number of fine ticks. \
The floating point number must be an IEEE 754 encoding.

time.timeTags.floatingPointTime.bytes.[TIME_TYPE_ID].description=Byte length of the floating point time field with the specified time \
type ID. 
time.timeTags.floatingPointTime.bytes.[TIME_TYPE_ID].validValues=4 | 8

time.timeTags.gpsTime.blockDescription=Properties that allow for the definition of custom GPS time fields.

time.timeTags.gpsTime.[TIME_TYPE_ID].description=This is for defining Global Positioning System (GPS) time fields. GPS times consist of \
weeks, seconds, and (possibly) subseconds. AMPCS multiplies the weeks value by the number of seconds per week \
to put GPS times in terms of the coarse/fine canonical Sclk.

time.timeTags.gpsTime.idList.description=Comma-separated list of GPS time type IDs. GPS time properties must be supplied \
for each ID on this list.
time.timeTags.gpsTime.idList.formatHint=Each value must start with either a letter or underscore and may contain only \
letters, digits, underscores, hyphens, and periods.
time.timeTags.gpsTime.idList=

time.timeTags.gpsTime.weekBits.[TIME_TYPE_ID].description=Number of bits in the weeks field for the GPS time with the specified time type ID.
time.timeTags.gpsTime.weekBits.[TIME_TYPE_ID].validValues=0 to Integer.MAX_VALUE

time.timeTags.gpsTime.secondBits.[TIME_TYPE_ID].description=Number of bits in the seconds field for the GPS time with the specified time type ID.
time.timeTags.gpsTime.secondBits.[TIME_TYPE_ID].validValues=0 to Integer.MAX_VALUE

time.timeTags.gpsTime.subsecondBits.[TIME_TYPE_ID].description=Number of bits in the subseconds field for the GPS time with the specified time type ID.
time.timeTags.gpsTime.subsecondBits.[TIME_TYPE_ID].validValues=0 to Integer.MAX_VALUE

time.timeTags.gpsTime.subsecondModulus.[TIME_TYPE_ID].description=Defines a custom number of subseconds per second \
in the GPS time with the specified time type ID. E.g., if it is set to 50,000, AMPCS will increment the seconds by 1 \
and reset the number of subseconds to 0 when the number of seconds reaches 50,000. There is no default.
time.timeTags.gpsTime.subsecondModulus.[TIME_TYPE_ID].validValues=0 to Integer.MAX_VALUE
