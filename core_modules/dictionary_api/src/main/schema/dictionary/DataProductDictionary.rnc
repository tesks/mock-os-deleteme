# AMPCS Multi-mission data product dictionary schema
#     
# This schema defines a common, multi-mission format for expression of the 
# contents of a data product.  It can be used to detail the structure of
# a science or engineering data product to the extent that each data value
# in the product is described.  The primary purpose is to allow automatted
# decommutation of the data product content. Each XML instance defines the 
# content of one type of data product.
#
# Copyright (c) 2013-2015 California Institute of Technology, All Rights Reserved
# JPL Proprietary Information
#
# Change Log:
#   V1.0  06/04/13   Original version adapted from MSAP and SMAP 
#                    schemas
#   V1.1  09/19/13   Minor updates in response to DMS SIS Review
#   V1.2  05/14/14   Use imported definition for product viewer
#                    element (ECR-116107)
#   V1.3  01/09/19   Made title element and version info element
#                    required for consistency with implementation. 
#   V1.4  01/30/19   Fixed poly-def clash preventing schema validation.
#   V1.5  11/19/19   Corrected 'bit_length' field -> 'bit_len' to match
#                    parser behavior. 
#
namespace rng = "http://relaxng.org/ns/structure/1.0"
datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"

# Include common dictionary XML definitions
include "CommonDictionary.rnc"

# Start XML document here
start = data-product-def

# Defines a single data product
data-product-def =
    element data_product {
     
        # Standard dictionary version header and general change log 
        header-def,
        
        # The table contains the actual structure of the data product.  This 
        # includes high level information about the data product (meta data), 
        # the actual data types and values that will be in the data product 
        # and information about how to  process the values once they have been 
        # received.
        table-def
    }

# Table that defines the metadata and structure of the data product
table-def =
    element table {
    
        # Identification of the data product
        element name {
        
            # The APID of the data product            
            attribute id { apid-range-def },
            
            # A textual description that identifies the product to the FSW developers
            attribute fsw_id { token-64-def }?,
            
            # A textual description used to document any other identifying information
            # for the data product
            # This element was listed as optional, but was
	 	 	# not effectively in the parser. Making this agree with implementation
	 	 	# for consistency.
            attribute title { name-def },
            
            # A systems level description. May be multi-line. White space will be 
            # preserved as is.
            element sysdesc { xsd:string }
        },
        
        # The data product version and where it is in its development.
        #  Version tied to overall cmd/tlm dictionary version
        # This element was listed as optional, but was
        # not effectively in the parser. Making this agree with implementation
	 	# for consistency.
        element versioninfo {
        
            # Version number of the Data Product.  The version numbers begin a 0 and 
            # increase by 1 with each new version of data product.
            attribute ver_num { xsd:integer },
            empty
        },
        
        # The mnemonic that was used to command this data product if applicable. 
        # Some data products are autonomously generated, in which case this would 
        # not apply.
        element command { stem-def }?,
        
        #
        # Removed local definition and used
        # global definition from the common schema instead.
        #
        # Data product viewer information. If the viewer is the default AMPCS DP 
        # viewer then the viewer element can be omitted entirely. 
        product-viewer-def?,
        
        # The data fields in the product
        fields-def
    }
    
# Specifies a series of data product fields. Repeat block fields
# may come only at the end of the data product.
fields-def =
    element fields {
        ((array-def | field-def | dynamic-array-def)+, repeat-block-def?)
        | repeat-block-def
    }
    
# Definition of a single primitive field in a data product.
field-def =
    element field {
    
        # Name of the variable of this field recognized by the flight software.
        attribute fsw_name { name-def },
        
        # Primitive data type associated with the field.
        attribute datatype { dp-data-types-def },
        
        # Length of the field in bytes or bits (but not both). No limit because 
        # strings can be unlimited in length
        # This must be byte alligned
        (attribute length { xsd:positiveInteger } | 
             attribute bit_len { xsd:positiveInteger }),
        
        # Optional: A standard C format string to represent the output of this field 
        # in AMPCS viewing tools.
        # Examples: "0x%4.4X" or "%d" or "Elvis sighted %d times today
        attribute format { xsd:string }?,
        
        # A systems level description of the field. May be multi-line. White space
        # will be preserved.
        element sysdesc { xsd:string }?,
        
        # Optional polynomial expansion for dn-eu conversion. The value extracted
        # from the data product is considered the DN.
        poly-product-def?,
        
        # Ground derived look up values (for enumerations or dn-eu conversion)
        lookup-def?,
        
        # Units associated with the field.  
        element units { xsd:token }?
    }

# Defines a polynomial expansion for computing an engineering unit value.
# This is defined as an iteratively computed value: eng = (eng * raw) + factor[i], 
# where i is the factor number from N to 0.
poly-product-def =
    element poly {
        
        # Defines factors (coefficients) for the polynomial. Factors will be used in 
        # order, with the first being factor 0, the second factor 1, and the last 
        # factor N. The number of factors is limited to 8. Indices must be 
        # continuous. One cannot specify index 0 and index 2 without specifying 
        # index 1.
        element coeff {
        
            # The polynomial index
            attribute index { poly-index-range-def },
            
            # The polynomial coefficient
            xsd:float
        }+
    }
    
# This lookup functionality has two capabilities with respect
# to data products.  The first capability is called states 
# and allows values in the data product to be enumerated 
# in the ground processing software.  The _enumerated_ value  
# in the data product will be an integer and the dict_value  
# is the corresponding state that will be displayed in 
# AMPCS. The second lookup capability allows for conversion of 
# raw data units (dn) to engineering units (eu) using a
# table.  This table can be used to do an interpolation
# on the ground in order to obtain a specific value in 
# engineering units.
lookup-def =
    element lookup {
    
        (
            # Defines a mapping table of integer value to state
            # value.
            element states {
            
                # The integer value extracted form the data product
                attribute enumerated_value { xsd:integer },
             
                # The string display value, or state, it maps to
                attribute dict_value { text }
            }*
         
         # OR
         | 
         
            # Defines a table interpolation from DN (raw extracted
            # value) to engineering units value
            element table {
            
               # and xsd:integer to xsd:long
               #
               # Data Number
               attribute dn { xsd:double | xsd:long },
               
               #
               # EU the DN corresponds to
               attribute eu { xsd:double | xsd:long }
            }*
        )
    }
    
# Describes a fixed-length array of fields in the data product, or an
# array with a variable number of elements, but which occupies the remainder
# of the product data.
#
# The array elements may be primitive values, or they may be structures, such 
# as a struct in the FSW.  This fixed-length array definition can be used 
# when the number of actual array elements in the data product are unknown 
# by placing a -1 in the num_items tag, but such an array must be the last 
# field in the data product.
array-def =
    element array {
    
        # Name of the array.
        attribute fsw_name { xsd:token },
        
        # The number of elements in the array. If this number is -1, this 
        # array continues until the end of the product.  If this
        # case is used, the array-def must be the last field defined in the 
        # data product. If this value is not -1, this is considered
        # a fixed-length array, and AMPCS will expect this many array elements
        # in the data product.
        attribute num_items { fixed-array-length-def },
        
        # An optional output format specifier for array elements. If the array
        # element is primitive, this format specifier can consist of a series
        # of primitive format specifiers, and output will be grouped to match. For 
        # instance, if each array element is an integer, then an output_format of
        # "%x %x %x %x" will cause the array elements to be displayed as 4 hex 
        # values per line of output. If each array element is a structure, then
        # the output_format may contain multiple format specifiers, and the
        # fields in the structure will be matched to them. For instance, if each 
        # array element consists of a string field, an integer field, and a float 
        # field, then an output_format of "%s = (%d, %f)" would output each element
        # as one line, with the string value being placed where the %s is, the 
        # integer value being placed where the %d is, and the float value
        # being placed where the %f is.
        #
        # This capability is limited. Arrays of arrays of structures, for instance,
        # may be too complex for AMPCS to map to an output_format. Results may
        # be unpredictable.  This capability is best used for arrays of primitives,
        # and arrays of simple structures.
        attribute output_format { xsd:string }?,
        
        # A systems level description of the field. May be multi-line. White space
        # will be preserved.
        element sysdesc { xsd:string },
        
        # A fixed array element may contain one or more other fixed arrays and 
        # primitive fields. 
        (array-def | field-def)+
    }

# Describes a variable-length array of fields in the data product, in which the 
# actual length of the array is extracted from a data field that occurs earlier 
# than the array in the product data.

# The array elements may be primitive values, or they may be structures, such 
# as a struct in the FSW. The length of the array is taken from a previous 
# primitive field, whose name must be specified using the variable tag. 
dynamic-array-def =
    element dynamic_array {
    
        # Name of the array.
        attribute fsw_name { xsd:token },
        
        # Name of the previous primitive field which contains the
        # array length. Much match the fsw_name of a previously-defined
        # primitive field.
        attribute variable { xsd:token },
        
        # An optional output format specifier for array elements. If the array
        # element is primitive, this format specifier can consist of a series
        # of primitive format specifiers, and output will be grouped to match. For 
        # instance, if each array element is an integer, then an output_format of
        # "%x %x %x %x" will cause the array elements to be displayed as 4 hex 
        # values per line of output. If each array element is a structure, then
        # the output_format may contain multiple format specifiers, and the
        # fields in the structure will be matched to them. For instance, if each 
        # array element consists of a string field, an integer field, and a float
        # field, then an output_format of "%s = (%d, %f)" would output each element
        # as one line, with the string value being placed where the %s is, the 
        # integer value being placed where the %d is, and the float value
        # being placed where the %f is.
        #
        # This capability is limited. Arrays of arrays of structures, for instance,
        # may be too complex for AMPCS to map to an output_format. Results may
        # be unpredictable.  This capability is best used for arrays of primitives,
        # and arrays of simple structures.
        attribute output_format { xsd:string }?,
        
        # A systems level description of the field. May be multi-line. White space
        # will be preserved.
        element sysdesc { xsd:string },
        
        # A dynamic array element may contain one or more other fixed arrays,
        # dynamic arrays, and primitive fields. 
        (array-def | field-def | dynamic-array-def)+
    }
    
# A repeat block is an anonymous array that may only be used once in a data product 
# and indicates that the remainder of the product data is composed of a repeating 
# pattern of data. Within the repeat block the data product may contain 
# fixed-length arrays, dynamic arrays, and primitive fields.
repeat-block-def =

    # A repeat block element may contain one or more other fixed arrays,
    # dynamic arrays, and primitive fields. 
    element repeat_block { (array-def | field-def | dynamic-array-def)+ }
    
#
# Data types for primitive product fields 
dp-data-types-def = ( "UNSIGNED_INT" | "SIGNED_INT" | "FLOAT" | "ASCII" | 
     "STATUS" | "FILL" )

# Valid range for number of items in a fixed array
fixed-array-length-def = ( "-1" | xsd:nonNegativeInteger )