#
# Transfer Frame dictionary schema.
#     
# Defines the format and types of telemetry transfers frames. The content
# of the transfer frame dictionary is normally defined once per
# mission from the Flight-Ground ICD or SIS. It contains the transfer frame
# sizes and encoding descriptions. The transfer frames defined here are
# assumed to be CCSDS frames, exclusive of station or other headers
# and trailers attached by software along the receipt path of the frame.
#
# Copyright (c) 2013 California Institute of Technology, All Rights Reserved
# JPL Proprietary Information
#
# Change Log:
#   V4.0  Date Unknown   Various authors 
#   V5.0  06/01/13       Imported common schema. Major
#                        commenting and re-organization. Removal of
#                        unsupported elements
#   V6.0  08/05/15       added namespace declarations.
#                        Correct spelling of reed-solomon.
#                        This is the final change for AMPCS 7.3 (MGSS ECR-117883)
#
namespace rng = "http://relaxng.org/ns/structure/1.0"
datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"

# Include common dictionary XML definitions
include "CommonDictionary.rnc"

# Start XML document here
start = transfer_frame-def

# The transfer frame dictionary root element.
transfer_frame-def = element transfer_frame {

    # Standard dictionary version header and general change log 
    header-def, 
    
    # The list of transfer frame definitions
    frames-def
}

# Defines the list of transfer frame definitions for the current mission
frames-def = element FrameDefinitions {
     
    # A single transfer frame definition  
    element Frame {
    
        # A name for this frame type. Must be unique within a single
        # mission.  This name is generally derived from the FGICD.
        # Examples; RS_LONG, LONG_TURBO_3.
        attribute name { symbol-def-32 },
        
        # CADU size in bits, which includes the sync mark (ASM), frame header 
        # and data, and encoding data size.
        attribute size { frame-size-def },
        
        # Total frame size when encoded (not the encoding size), in bits.
        # The encodedSize is the same as the CADU size above for most types of
        # frames. Currently, the only exception is that the encoded size of
        # turbo frames is larger than the CADU size.
        attribute encodedSize { xsd:positiveInteger }?,
        
        # Frame encoding type/error correction strategy.
        #
        # If this value is turbo, the rate and turbo_trellis_bits tags
        # should be supplied.
        #
        # If this value is checksum or turbo, the frame is assumed
        # to have a checksum. The standard checksum algorithm assumes
        # that the checksum is 16 bits long, but the algorithm can
        # be overridden. The length of these checkbits must be included
        # using the enc_size tag.
        #
        # If this value is reed-solomon, the frame is assumed to have
        # attached reed-solomon checkbits.  The length of these checkbits
        # must be included using the enc_size tag. The value of the 
        # checkbits at time of frame receipt is currently ignored,
        # as the GDS does not perform reed-solomon checking. Note that 
        # reed-solomon frames may also have a checksum, but the GDS will
        # not verify it.  Also, in this case, the length of the checksum
        # must be added to the length of the RS-checkbits, and the total
        # value supplied for the enc_size tag.
        #
        # If this value is none, the frame should have no checksum
        # or checkbits, no trellis bits, and the enc_size value
        # should be 0.
        attribute encoding { encoding-type-def },
        
        # Encoding rate. (Used for turbo-encoded frame types only).
        attribute rate { turbo-rate-def }?,
        
        # Frame synchronization marker (ASM) information. The ASM is 
        # also sometimes called the Psuedo-Noise (PN) code.
        element asm {
        
            # The size of the ASM in bits as the frame is received
            # from the operational station. Should be 0 for turbo
            # frames received via DSN services.
            attribute bit_size { asm-size-def }, 
            
            # The size of the ASM in bits as the frame is downloaded from
            # the spacecraft. Note that this number is the same as the
            # ASM bit_size above except in the case of turbo frames. For 
            # turbo frames, the DSN strips the ASM.  
            attribute actual_size { asm-size-def },
            
            # The ASM as hex value
		 	hex-only-int 
        },

        # Bits of encoding data. Needed to calculate the actual
        # frame data area. This value may be either the frame 
        # checksum size or the number of RS checkbits, or the sum 
        # of both. Otherwise, it should be 0.
        #
        # Note that there is one other use for this field in the GDS.
        # If frames are padded with data that should be ignored, the 
        # the enc_size can be adjusted to reflect the number of bits
        # that should be ignored. This can occur, for instance, in
        # flight softare development environments, where turbo
        # frames are delivered but not encoded; rather, the frames are
        # simply 0-filled out to the turbo frame length.
        element enc_size { encoding-size-def },

        # Number of turbo trellis termination bits. This value should
        # be 4/turbo-rate.  Used only to calculate the
        # actual size of the frame data area. Note that in the vast
        # majority of circumstances, this number is 0 by the time
        # the frame reaches the GDS, which does not perform turbo 
        # decoding. 
        #
        # TODO - There seems to be no situation in which this is not
        # 0 in the AMPCS context. Should we remove this?
        element turbo_trellis_bits { turbo-trellis-def }?       
    }+
}

# Valid values for turbo encoding rate
turbo-rate-def = ( "1/2" | "1/3" | "1/6")

# Valid values for turbo trellis bits
turbo-trellis-def = ( "0" | "8" | "12" | "24")

# Valid values for encoding type
encoding-type-def = ("reed-solomon" | "checksum" | "turbo" | "none")

# Frame size limit. The largest frame the GDS can currently store is 7000 bytes
frame-size-def = xsd:positiveInteger { minInclusive = "1" maxInclusive = "448000" }

# Encoding size limit. The largest frame the GDS can currently store is 7000 bytes,
# so the encoding bits cannot be bigger than that, but unlike frame size, can be 0.
encoding-size-def = xsd:nonNegativeInteger { minInclusive = "0" maxInclusive = "448000" }

# ASM size limit. 
asm-size-def = xsd:nonNegativeInteger { minInclusive = "0" maxInclusive = "192" }
