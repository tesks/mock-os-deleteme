/**
 * Copyright 2006-2018. California Institute of Technology.
 * ALL RIGHTS RESERVED.
 * U.S. Government sponsorship acknowledged.
 *
 * This software is subject to U. S. export control laws and
 * regulations (22 C.F.R. 120-130 and 15 C.F.R. 730-774). To the
 * extent that the software is subject to U.S. export control laws
 * and regulations, the recipient has the responsibility to obtain
 * export licenses or other export authority as may be required
 * before exporting such information to foreign countries or
 * providing access to foreign nationals.
 */
/**
 * AMPCS common protobuf schema for EHA alarm primitives.
 *
 * Version: 1.0
 * ChangeLog:
 * V1.0 - New for R8
 */
syntax = "proto3";

option optimize_for = SPEED;
option java_multiple_files = true;
option java_package = "jpl.gds.serialization.primitives.alarm";
option java_outer_classname = "ProtoBufAlarmPrimitiveSerialization";

/**
 * AlarmLevel is an enumeration of telemetry alarm levels. RED alarms have the
 * highest severity. YELLOW alarms are next in severity, with NONE being last,
 * representing no alarm state. If there is both a RED and a YELLOW alarm on the
 * same channel, the RED state will be the displayed state.
 */
enum Proto3AlarmLevel {
	/**
	 * No alarm
	 */
	NONE = 0;

	/**
	 * Yellow alarm
	 */
	YELLOW = 1;

	/**
	 * Red alarm
	 */
	RED = 2;
}


/*
 * AlarmType is an enumeration of supported telemetry channel alarm types. Every
 * AlarmDefinition object has an associated AlarmType. AlarmDefinitions of the
 * proper type can be created using the AlarmDefinitionFactory.
 *
 */

enum Proto3AlarmType {
	/**
	 * Undefined Alarm type
	 */
	NO_TYPE = 0;
	/**
	 * High value alarm
	 */
	HIGH_VALUE_COMPARE = 1;
	/**
	 * Low value alarm
	 */
	LOW_VALUE_COMPARE = 2;
	/**
	 * State comparison alarm
	 */
	STATE_COMPARE = 3;
	/**
	 * Change alarm
	 */
	VALUE_CHANGE = 4;
	/**
	 * Delta alarm
	 */
	VALUE_DELTA = 5;
	/**
	 * Exclusive range alarm
	 */
	EXCLUSIVE_COMPARE = 6;
	/**
	 * Inclusive range alarm
	 */
	INCLUSIVE_COMPARE = 7;
	/**
	 * Digital mask alarm
	 */
	DIGITAL_COMPARE = 8;
	/**
	 * Plain mask alarm
	 */
	MASK_COMPARE = 9;
	/**
	 * Compound alarm (combines multiple alarms on the same channel)
	 */
	COMPOUND = 10;
	/**
	 * Combination alarm (combines alarms on different channels)
	 */
	COMBINATION = 11; // Included here as placeholder, but not used
	/**
	 * Combination alarm source proxy
	 */
	COMBINATION_SOURCE = 12;
	/**
	 * Combination alarm target proxy
	 */
	COMBINATION_TARGET = 13;
}
