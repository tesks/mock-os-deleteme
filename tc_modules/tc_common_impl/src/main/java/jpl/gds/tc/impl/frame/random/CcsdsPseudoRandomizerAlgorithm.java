/*
 * Copyright 2006-2018. California Institute of Technology.
 * ALL RIGHTS RESERVED.
 * U.S. Government sponsorship acknowledged.
 *
 * This software is subject to U. S. export control laws and
 * regulations (22 C.F.R. 120-130 and 15 C.F.R. 730-774). To the
 * extent that the software is subject to U.S. export control laws
 * and regulations, the recipient has the responsibility to obtain
 * export licenses or other export authority as may be required
 * before exporting such information to foreign countries or
 * providing access to foreign nationals.
 */

package jpl.gds.tc.impl.frame.random;

import java.util.Arrays;

import jpl.gds.tc.api.config.IPseudoRandomizerAlgorithm;


/**
 * This class is an implementation of the telecommand pseudo randomization
 * algorithm as specified in the CCSDS telecommand space data link protocol
 * blue book.
 * 
 * The algorithm is based on a bit generator that is always initialized to the
 * same value and repeats itself every 256 bits.  Because the algorithm repeats,
 * it is much faster to hardcode the repeating values in an array and simply index
 * them as needed.
 * 
 * In the case of this algorithm, the pseudorandom bytes are XORed with the incoming
 * data.  Because the XOR operation is its own inverse, randomization and derandomization
 * are the same operation.
 * 
 * It should be noted that this class only operates on byte arrays, it does not operate
 * at the bit level.  This is because Telecommand frames always contain an integral number
 * of bytes and telecommand pseudo randomization is always applied at the telecommand frame
 * level (technically the CLTU codeblock data level...which is telecommand frame and fill data)
 * 
 *
 */
public class CcsdsPseudoRandomizerAlgorithm implements IPseudoRandomizerAlgorithm
{
	/**
	 * The repeating set of 256 bits generated by the bit transition generator
	 * in the CCSDS pseudorandomization algorithm
	 * 
	 * MPCS-7712  07/28/16 - According to CCSDS 231.0-B-2 Blue Book the
	 * pseudo-random sequence repeats after 255 bits and STARTS with all 1's in the eight registers.
	 * The values we had previously were right, but were being preceded by a 0.
	 * Because one loop through would have us 1 bit short of a full 32 bytes, the second would be 2 short, etc,
	 * I calculated and set a table of 8 iterations of the pseudorandom code encapsulated in byte form, which gives
	 * 255 complete bytes.
	 */
	private static final byte[] pseudoRandomizerBytes = new byte[]
	{
			(byte)0xFF, (byte)0x39, (byte)0x9E, (byte)0x5A, (byte)0x68, (byte)0xE9, (byte)0x06, (byte)0xF5,
			(byte)0x6C, (byte)0x89, (byte)0x2F, (byte)0xA1, (byte)0x31, (byte)0x5E, (byte)0x08, (byte)0xC0,
			(byte)0x52, (byte)0xA8, (byte)0xBB, (byte)0xAE, (byte)0x4E, (byte)0xC2, (byte)0xC7, (byte)0xED,
			(byte)0x66, (byte)0xDC, (byte)0x38, (byte)0xD4, (byte)0xF8, (byte)0x86, (byte)0x50, (byte)0x3D, //1
			(byte)0xFE, (byte)0x73, (byte)0x3C, (byte)0xB4, (byte)0xD1, (byte)0xD2, (byte)0x0D, (byte)0xEA,
			(byte)0xD9, (byte)0x12, (byte)0x5F, (byte)0x42, (byte)0x62, (byte)0xBC, (byte)0x11, (byte)0x80,
			(byte)0xA5, (byte)0x51, (byte)0x77, (byte)0x5C, (byte)0x9D, (byte)0x85, (byte)0x8F, (byte)0xDA,
			(byte)0xCD, (byte)0xB8, (byte)0x71, (byte)0xA9, (byte)0xF1, (byte)0x0C, (byte)0xA0, (byte)0x7B, //2
			(byte)0xFC, (byte)0xE6, (byte)0x79, (byte)0x69, (byte)0xA3, (byte)0xA4, (byte)0x1B, (byte)0xD5,
			(byte)0xB2, (byte)0x24, (byte)0xBE, (byte)0x84, (byte)0xC5, (byte)0x78, (byte)0x23, (byte)0x01,
			(byte)0x4A, (byte)0xA2, (byte)0xEE, (byte)0xB9, (byte)0x3B, (byte)0x0B, (byte)0x1F, (byte)0xB5,
			(byte)0x9B, (byte)0x70, (byte)0xE3, (byte)0x53, (byte)0xE2, (byte)0x19, (byte)0x40, (byte)0xF7, //3
			(byte)0xF9, (byte)0xCC, (byte)0xF2, (byte)0xD3, (byte)0x47, (byte)0x48, (byte)0x37, (byte)0xAB,
			(byte)0x64, (byte)0x49, (byte)0x7D, (byte)0x09, (byte)0x8A, (byte)0xF0, (byte)0x46, (byte)0x02,
			(byte)0x95, (byte)0x45, (byte)0xDD, (byte)0x72, (byte)0x76, (byte)0x16, (byte)0x3F, (byte)0x6B,
			(byte)0x36, (byte)0xE1, (byte)0xC6, (byte)0xA7, (byte)0xC4, (byte)0x32, (byte)0x81, (byte)0xEF, //4
			(byte)0xF3, (byte)0x99, (byte)0xE5, (byte)0xA6, (byte)0x8E, (byte)0x90, (byte)0x6F, (byte)0x56,
			(byte)0xC8, (byte)0x92, (byte)0xFA, (byte)0x13, (byte)0x15, (byte)0xE0, (byte)0x8C, (byte)0x05,
			(byte)0x2A, (byte)0x8B, (byte)0xBA, (byte)0xE4, (byte)0xEC, (byte)0x2C, (byte)0x7E, (byte)0xD6,
			(byte)0x6D, (byte)0xC3, (byte)0x8D, (byte)0x4F, (byte)0x88, (byte)0x65, (byte)0x03, (byte)0xDF, //5
			(byte)0xE7, (byte)0x33, (byte)0xCB, (byte)0x4D, (byte)0x1D, (byte)0x20, (byte)0xDE, (byte)0xAD,
			(byte)0x91, (byte)0x25, (byte)0xF4, (byte)0x26, (byte)0x2B, (byte)0xC1, (byte)0x18, (byte)0x0A,
			(byte)0x55, (byte)0x17, (byte)0x75, (byte)0xC9, (byte)0xD8, (byte)0x58, (byte)0xFD, (byte)0xAC,
			(byte)0xDB, (byte)0x87, (byte)0x1A, (byte)0x9F, (byte)0x10, (byte)0xCA, (byte)0x07, (byte)0xBF, //6
			(byte)0xCE, (byte)0x67, (byte)0x96, (byte)0x9A, (byte)0x3A, (byte)0x41, (byte)0xBD, (byte)0x5B,
			(byte)0x22, (byte)0x4B, (byte)0xE8, (byte)0x4C, (byte)0x57, (byte)0x82, (byte)0x30, (byte)0x14,
			(byte)0xAA, (byte)0x2E, (byte)0xEB, (byte)0x93, (byte)0xB0, (byte)0xB1, (byte)0xFB, (byte)0x59,
			(byte)0xB7, (byte)0x0E, (byte)0x35, (byte)0x3E, (byte)0x21, (byte)0x94, (byte)0x0F, (byte)0x7F, //7
			(byte)0x9C, (byte)0xCF, (byte)0x2D, (byte)0x34, (byte)0x74, (byte)0x83, (byte)0x7A, (byte)0xB6,
			(byte)0x44, (byte)0x97, (byte)0xD0, (byte)0x98, (byte)0xAF, (byte)0x04, (byte)0x60, (byte)0x29,
			(byte)0x54, (byte)0x5D, (byte)0xD7, (byte)0x27, (byte)0x61, (byte)0x63, (byte)0xF6, (byte)0xB3,
			(byte)0x6E, (byte)0x1C, (byte)0x6A, (byte)0x7C, (byte)0x43, (byte)0x28, (byte)0x1E              //8
	};
	
	/**
	 * 
	 * Creates an instance of CcsdsPseudoRandomizerAlgorithm.
	 * 
	 * This class must have a no-argument constructor so that it can be 
	 * dynamically instantiated using Java reflection.
	 */
	public CcsdsPseudoRandomizerAlgorithm()
	{
		//empty
	}
	
	/**
	 * {@inheritDoc}
	 * @see jpl.gds.tc.api.config.IPseudoRandomizerAlgorithm#randomize(byte[])
	 */
	@Override
	public byte[] randomize(final byte[] inputBytes)
	{
		if(inputBytes == null)
		{
			throw new IllegalArgumentException("Null input byte array");
		}
		
		//the output is the same length as the input
		//(start with an output that's all zeroes)
		byte[] outputBytes = new byte[inputBytes.length];
		Arrays.fill(outputBytes,(byte)0x00);
		
		//loop through all the input and XOR it with the pseudorandom bytes
		//(the pseudo random bytes repeat once the end of the array is reached, so that's
		//why we're doing modulus on the length of the array)
		for(int i=0; i < outputBytes.length; i++)
		{
			outputBytes[i] = (byte)(inputBytes[i] ^ pseudoRandomizerBytes[i%pseudoRandomizerBytes.length]);
		}
		
		return(outputBytes);
	}

	/**
	 * {@inheritDoc}
	 * @see jpl.gds.tc.api.config.IPseudoRandomizerAlgorithm.frame.PseudoRandomizerAlgorithm#randomize(byte[], int)
	 */
	@Override
	public byte[] randomize(final byte[] inputBytes, final int offset)
	{
		if(inputBytes == null)
		{
			throw new IllegalArgumentException("Null input byte array");
		}
		else if(offset < 0 || offset > inputBytes.length)
		{
			throw new ArrayIndexOutOfBoundsException("The input offset value of " + offset + " falls outside "
					+ " the allowable array index range of 0 to " + (inputBytes.length-1));
		}
		
		byte[] inBytes = new byte[inputBytes.length-offset];
		System.arraycopy(inputBytes,offset,inBytes,0,inBytes.length);
		return(randomize(inBytes));
	}
	
	/**
	 * {@inheritDoc}
	 * @see jpl.gds.tc.api.config.IPseudoRandomizerAlgorithm.frame.PseudoRandomizerAlgorithm#randomize(byte[], int, int)
	 */
	@Override
	public byte[] randomize(final byte[] inputBytes, final int offset, final int length)
	{
		if(inputBytes == null)
		{
			throw new IllegalArgumentException("Null input byte array");
		}
		else if((offset < 0 || offset > inputBytes.length) ||
				(length < 0 || length > inputBytes.length) ||
				((offset + length) >= inputBytes.length))
		{
			throw new ArrayIndexOutOfBoundsException("The input (offset,length) values of (" 
					+ offset + "," + length + ")  falls outside "
					+ " the allowable array index range of 0 to " + (inputBytes.length-1));
		}
		
		byte[] inBytes = new byte[length];
		System.arraycopy(inputBytes,offset,inBytes,0,length);
		return(randomize(inBytes));
	}
	
	/**
	 * {@inheritDoc}
	 * @see jpl.gds.tc.api.config.IPseudoRandomizerAlgorithm.frame.PseudoRandomizerAlgorithm#derandomize(byte[])
	 */
	@Override
	public byte[] derandomize(final byte[] inputBytes)
	{
		if(inputBytes == null)
		{
			throw new IllegalArgumentException("Null input byte array");
		}
		
		//this is an XOR algorithm and the inverse of XOR is XOR, so randomization and
		//derandomization are the same operation
		return(randomize(inputBytes));
	}

	/**
	 * {@inheritDoc}
	 * @see jpl.gds.tc.api.config.IPseudoRandomizerAlgorithm.frame.PseudoRandomizerAlgorithm#derandomize(byte[], int)
	 */
	@Override
	public byte[] derandomize(final byte[] inputBytes, final int offset)
	{
		if(inputBytes == null)
		{
			throw new IllegalArgumentException("Null input byte array");
		}
		else if(offset < 0 || offset > inputBytes.length)
		{
			throw new ArrayIndexOutOfBoundsException("The input offset value of " + offset + " falls outside "
					+ " the allowable array index range of 0 to " + (inputBytes.length-1));
		}
		
		byte[] inBytes = new byte[inputBytes.length-offset];
		System.arraycopy(inputBytes,offset,inBytes,0,inBytes.length);
		return(derandomize(inBytes));
	}
	
	/**
	 * {@inheritDoc}
	 * @see jpl.gds.tc.api.config.IPseudoRandomizerAlgorithm.frame.PseudoRandomizerAlgorithm#derandomize(byte[], int, int)
	 */
	@Override
	public byte[] derandomize(final byte[] inputBytes, final int offset, final int length)
	{
		if(inputBytes == null)
		{
			throw new IllegalArgumentException("Null input byte array");
		}
		else if((offset < 0 || offset > inputBytes.length) ||
				(length < 0 || length > inputBytes.length) ||
				((offset + length) >= inputBytes.length))
		{
			throw new ArrayIndexOutOfBoundsException("The input (offset,length) values of (" 
					+ offset + "," + length + ")  falls outside "
					+ " the allowable array index range of 0 to " + (inputBytes.length-1));
		}
		
		byte[] inBytes = new byte[length];
		System.arraycopy(inputBytes,offset,inBytes,0,length);
		return(derandomize(inBytes));
	}
	
	//Shows the pseudo-randomization generator (BTG) in action...our byte array only has 32 bytes in it
	//because the generator repeats itself every 32 bytes (run the code below if you need to double check that)
	//
	//This code should never need to be used, but it simply demonstrates the origin of the 
	//static byte[] of this class.
	//
//	public static void main(String[] args)
//	{
//		StringBuffer out = new StringBuffer(1024);
//		
//		int x1 = 0x00000001;
//		int x2 = 0x00000001;
//		int x3 = 0x00000001;
//		int x4 = 0x00000001;
//		int x5 = 0x00000001;
//		int x6 = 0x00000001;
//		int x7 = 0x00000001;
//		int x8 = 0x00000001;
//		
//		for(int i=0; i <= 1024; i++)
//		{
//			out.append(x1);
//			
//			int new_x8 = x7 ^ (x5 ^ (x4 ^ (x3 ^ (x2 ^ x1))));
//			
//			x1 = x2;
//			x2 = x3;
//			x3 = x4;
//			x4 = x5;
//			x5 = x6;
//			x6 = x7;
//			x7 = x8;
//			x8 = new_x8;
//		}
//		
//		String outStr = out.toString();
//		for(int j=0; j < outStr.length()-255; j += 255)
//		{
//			System.out.println(BinOctHexUtility.ToHexFromBin(outStr.substring(j,j+255)));
//		}
//	}
}